{"version":3,"sources":["assets/images/coronavirus.png","components/Loader.js","context/GHScontext.js","components/Snapshot.js","components/Spinner.js","components/aside/TotalCases.js","components/aside/BasicStats.js","components/aside/StatsExplanation.js","components/aside/StarOnGithub.js","components/aside/EmergencyContacts.js","components/Headline.js","components/Resources.js","components/LiveUpdates.js","custom_hooks/capitalize.js","components/Tabs.js","components/aside/GlobalStats.js","components/ContentLayout.js","pages/HomePage.js","components/navbar/Logo.js","components/navbar/Navigation.js","components/countries/SearchBox.js","components/countries/TableRow.js","components/countries/TabularData.js","components/countries/CountryStats.js","pages/Statistics.js","pages/GlobalNews.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","className","GHSContext","React","createContext","posts","video","cases","loading","Snapshot","GHSData","useContext","src","coronaVirus","alt","style","color","count","recoveries","deaths","Spinner","TotalCases","date","BasicStats","recoveryRate","CFR","StatsExplanation","href","title","target","rel","StarOnGithub","role","aria-label","EmergencyContacts","useState","phone","contacts","Fragment","map","contact","index","key","textDecoration","Headline","props","HealthResources","text","url","resources","resource","LiveUpdates","videoHeading","width","height","videoLink","frameBorder","allowFullScreen","post","slice","toLowerCase","replace","a","toUpperCase","whiteSpace","content","textAlign","Tabs","id","GlobalStats","globalCases","setGlobalCases","loadingCases","setLoadingCases","useEffect","axios","get","then","response","data","todayCases","todayDeaths","recovered","active","critical","casesPerOneMillion","deathsPerOneMillion","affectedCountries","moment","updated","fromNow","ContentLayout","HomePage","Logo","options","max","to","NavigationMenu","path","navLinks","M","AutoInit","menuLinks","item","data-target","SearchBox","countries","onFilter","type","placeholder","onChange","length","TableRow","countryInfo","flag","country","TabularData","latestUpdate","time","format","opacity","fontSize","CountryStats","setCountries","isLoading","setLoading","search","setSearch","setRecentUpdate","catch","err","console","log","error","filteredCountries","filter","c","includes","event","value","Statistics","GlobalNews","marginTop","App","setPosts","setVideo","setCases","$","cheerio","load","postData","latestVideo","confirmedCases","each","i","el","find","push","casesCount","today","Date","dateTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","toFixed","videoTitle","videoUrl","attr","Navigation","Provider","exact","render","size","bannerColor","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0ea028c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coronavirus.945cf0ed.png\";","import React from \"react\";\n\nconst Loader = () => {\n  return (\n    <span className=\"spinner\">\n      <div className=\"rect1\"></div>\n      <div className=\"rect2\"></div>\n      <div className=\"rect3\"></div>\n      <div className=\"rect4\"></div>\n      <div className=\"rect5\"></div>\n    </span>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\n\nconst GHSContext = React.createContext({\n  posts: [],\n  video: {},\n  cases: {},\n  loading: false\n});\n\nexport default GHSContext;\n","import React, { useContext } from \"react\";\nimport coronaVirus from \"../assets/images/coronavirus.png\";\nimport Loader from \"./Loader\";\nimport GHSContext from \"../context/GHScontext\";\n\nconst Snapshot = () => {\n  const GHSData = useContext(GHSContext);\n  return (\n    <div className=\"snapshot\">\n      <div className=\"row\">\n        <div className=\"col s12 m6 l6\">\n          <img\n            src={coronaVirus}\n            alt=\"Coronavirus logo\"\n            className=\"materialboxed responsive-img corologo\"\n          />\n        </div>\n        <div className=\"col s12 m6 l6\">\n          <h2 className=\"mantra\">\n            Everyone is talking about the deadly coronavirus\n          </h2>\n\n          <div className=\"overview center-align\">\n            <div>\n              There are\n              <span style={{ color: \"#fff\" }}>\n                {\" \"}\n                currently {GHSData.loading ? (\n                  GHSData.cases.count\n                ) : (\n                  <Loader />\n                )}{\" \"}\n                confirmed cases in Ghana\n              </span>\n            </div>\n            <div style={{ color: \"yellow\" }}>\n              {GHSData.loading ? GHSData.cases.recoveries : <Loader />}{\" \"}\n              recovered cases has been recorded\n            </div>\n            <div>\n              {GHSData.loading ? GHSData.cases.deaths : <Loader />} lives has\n              been lost to the virus\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Snapshot;\n","import React from \"react\";\n\nconst Spinner = () => {\n  return (\n    <div className=\"sk-fading-circle\">\n      <div className=\"sk-circle1 sk-circle\"></div>\n      <div className=\"sk-circle2 sk-circle\"></div>\n      <div className=\"sk-circle3 sk-circle\"></div>\n      <div className=\"sk-circle4 sk-circle\"></div>\n      <div className=\"sk-circle5 sk-circle\"></div>\n      <div className=\"sk-circle6 sk-circle\"></div>\n      <div className=\"sk-circle7 sk-circle\"></div>\n      <div className=\"sk-circle8 sk-circle\"></div>\n      <div className=\"sk-circle9 sk-circle\"></div>\n      <div className=\"sk-circle10 sk-circle\"></div>\n      <div className=\"sk-circle11 sk-circle\"></div>\n      <div className=\"sk-circle12 sk-circle\"></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useContext, Fragment } from \"react\";\nimport GHSContext from \"../../context/GHScontext\";\nimport Spinner from \"../Spinner\";\n\nconst TotalCases = () => {\n  const GHSData = useContext(GHSContext);\n  return (\n    <div className=\"total-cases ui tall stacked segment  red lighten-1 \">\n      <h4 className=\"ui horizontal divider header grey black-text white\">\n        Confirmed Cases\n      </h4>\n      {GHSData.loading ? (\n        <Fragment>\n          <h5 className=\"case-count center-align\">{GHSData.cases.count}</h5>\n          <p className=\"center-align\">{GHSData.cases.date}</p>\n        </Fragment>\n      ) : (\n        <Spinner />\n      )}\n    </div>\n  );\n};\n\nexport default TotalCases;\n","import React, { useContext, Fragment } from \"react\";\nimport GHSContext from \"../../context/GHScontext\";\nimport Spinner from \"../Spinner\";\n\nconst BasicStats = () => {\n  const GHSData = useContext(GHSContext);\n  return (\n    <div className=\"basic-stats  ui tall stacked segment  lime accent-2\">\n      <h4 className=\"ui horizontal divider header black-text white\">\n        Basic Stats\n      </h4>\n      {GHSData.loading ? (\n        <Fragment>\n          <p>\n            Recoveries: {GHSData.cases.recoveries} ({GHSData.cases.recoveryRate}\n            %)\n          </p>\n          <p>Deaths: {GHSData.cases.deaths}</p>\n          <p>Case Fatality Rate: {GHSData.cases.CFR}%</p>\n        </Fragment>\n      ) : (\n        <Spinner />\n      )}\n    </div>\n  );\n};\n\nexport default BasicStats;\n","import React from \"react\";\n\nconst StatsExplanation = () => {\n  return (\n    <div className=\"stats-explain ui tall stacked segment  green lighten-3\">\n      <h4 className=\"ui horizontal divider header black-text white\">\n        How Stats were calculated\n      </h4>\n      <p>\n        Total cases, deaths, and recoveries are retrieved asynchronously from\n        the official{\" \"}\n        <a\n          href=\"https://ghanahealthservice.org/covid19/\"\n          title=\"Compare data to the ghs website\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Ghana Health Service Website\n        </a>\n      </p>\n      <p>\n        Rates (percentages) are calculated by dividing the current amount of\n        recoveries/deaths by the current amount of total cases.\n      </p>\n    </div>\n  );\n};\n\nexport default StatsExplanation;\n","import React from \"react\";\n\nconst StarOnGithub = () => {\n  return (\n    <div className=\"star-github ui tall stacked segment  yellow accent-1\">\n      <h4 className=\"ui horizontal divider header black-text white\">\n        Star on Github\n      </h4>\n      <h5 className=\"case-count\">\n        Made with{\" \"}\n        <span role=\"img\" aria-label=\"heart\">\n          💓\n        </span>{\" \"}\n        by{\" \"}\n        <a\n          href=\"https://github.com/danielkpodo\"\n          title=\"Visit my github profile\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Daniel Narh\n        </a>\n        <br /> <br />\n        Email:{\" \"}\n        <a\n          href=\"mailto:kpododanielnarh@gmail.com\"\n          title=\"Send me a mail\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          kpododanielnarh@gmail.com\n        </a>\n      </h5>\n    </div>\n  );\n};\n\nexport default StarOnGithub;\n","import React, { useState } from \"react\";\n\nconst EmergencyContacts = () => {\n  const [contacts, setContacts] = useState([\n    { phone: 112 },\n    { phone: \"+233 55 843 9868\" },\n    { phone: \"233 50 949 7700\" }\n  ]);\n  return (\n    <div className=\"emergency-contacts  ui tall stacked segment  amber accent-4\">\n      <h4 className=\"ui horizontal divider header black-text white\">\n        Emergency Contacts\n      </h4>\n      <React.Fragment>\n        {contacts.map((contact, index) => {\n          return (\n            <p key={index}>\n              <a\n                href={`tel:${contact.phone}`}\n                style={{ color: \"#000\", textDecoration: \"underline\" }}\n              >\n                {contact.phone}\n              </a>\n            </p>\n          );\n        })}\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default EmergencyContacts;\n","import React from \"react\";\n\nconst Headline = props => {\n  return (\n    <div className=\"headline\">\n      <h3>{props.title}</h3>\n    </div>\n  );\n};\n\nexport default Headline;\n","import React, { useState } from \"react\";\nimport { MdTimeline } from \"react-icons/md\";\n\nconst HealthResources = () => {\n  const [resources, setResources] = useState([\n    {\n      text: \"Advice from the World Health Organization\",\n      url:\n        \"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/advice-for-public\",\n      title: \"Visit WHO for more info\"\n    },\n    {\n      text: \"Advice from the Centers for Disease Control & Prevention\",\n      url: \"https://www.cdc.gov/coronavirus/2019-ncov/prepare/prevention.html\",\n      title: \"Visit CDC for safety tips\"\n    },\n    {\n      text: \"Information from the National Health Service (UK)\",\n      url: \"https://www.nhs.uk/conditions/coronavirus-covid-19/\",\n      title: \"Preventive tips from the UK\"\n    },\n    {\n      text: \"Information from the Ghana Health Service\",\n      url: \"https://ghanahealthservice.org/covid19/about.php\",\n      title: \"Learn more about coronavirus\"\n    },\n    {\n      text: \"What is Coronavirus, Signs, Symptoms, Treatment\",\n      url: \"https://www.healthline.com/health/coronavirus-covid-19\",\n      title: \"Learn more from healthline\"\n    }\n  ]);\n  return (\n    <div className=\"resources\">\n      {resources.map((resource, index) => {\n        return (\n          <div className=\"resource-link z-depth-5 red accent-1\" key={index}>\n            <a\n              href={resource.url}\n              target=\"_blank\"\n              title={resource.title}\n              rel=\"noopener noreferrer\"\n            >\n              {resource.text}\n            </a>{\" \"}\n            <MdTimeline />\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default HealthResources;\n","import React, { useContext } from \"react\";\nimport GHSContext from \"../context/GHScontext\";\nimport Spinner from \"./Spinner\";\nimport capitalize from \"../custom_hooks/capitalize\";\n\nconst LiveUpdates = () => {\n  const GHSData = useContext(GHSContext);\n  return (\n    <div className=\"live-updates\">\n      <h5 className=\"video-header\">{GHSData.video.videoHeading}</h5>\n      {GHSData.loading ? (\n        <div className=\"video-container z-depth-3\">\n          <iframe\n            width=\"853\"\n            height=\"480\"\n            src={`${GHSData.video.videoLink}`}\n            frameBorder=\"0\"\n            allowFullScreen\n          ></iframe>\n        </div>\n      ) : (\n        <Spinner />\n      )}\n      {GHSData.loading ? (\n        GHSData.posts.map((post, index) => {\n          return (\n            <div className=\"ui stacked segment red lighten-5\" key={index}>\n              <h6>{capitalize(post.title.slice(0, 76))}</h6>\n              <div className=\"ui divider\"></div>\n              <p style={{ whiteSpace: \"pre-line\" }}>\n                {post.content.replace(\"/\\n\\r\\n\\r\\n/g\", \"<br />\")}\n              </p>\n            </div>\n          );\n        })\n      ) : (\n        <h6 style={{ color: \"#fff\", textAlign: \"center\" }}>\n          Loading situational updates...\n        </h6>\n      )}\n    </div>\n  );\n};\n\nexport default LiveUpdates;\n","export default function capitalize(s) {\n  return s.toLowerCase().replace(/\\b./g, function(a) {\n    return a.toUpperCase();\n  });\n}\n","import React from \"react\";\nimport HealthResources from \"./Resources\";\nimport LiveUpdates from \"./LiveUpdates\";\n\nconst Tabs = () => {\n  return (\n    <div className=\"resources-updates\">\n      <ul id=\"tabs-swipe-demo\" className=\"tabs\">\n        <li className=\"tab col s6\">\n          <a href=\"#resources\" className=\"active\">\n            Health Resources\n          </a>\n        </li>\n        <li className=\"tab col s6\">\n          <a href=\"#updates\">GHS Live Updates</a>\n        </li>\n      </ul>\n      <div id=\"resources\" className=\"col s12\">\n        <HealthResources />\n      </div>\n      <div id=\"updates\" className=\"col s12\">\n        <LiveUpdates />\n      </div>\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport Spinner from \"../Spinner\";\n\nconst GlobalStats = () => {\n  const [globalCases, setGlobalCases] = useState({});\n  const [loadingCases, setLoadingCases] = useState(false);\n\n  useEffect(() => {\n    axios.get(\"https://corona.lmao.ninja/all\").then((response) => {\n      setLoadingCases(true);\n      setGlobalCases(response.data);\n    });\n  }, []);\n\n  return (\n    <div className=\"basic-stats  ui tall stacked segment  teal accent-1\">\n      <h4 className=\"ui horizontal divider header black-text white\">\n        Global Case Statistics\n      </h4>\n      {loadingCases ? (\n        <Fragment>\n          <p className=\"global_numbers\">\n            <span>Total Cases</span> <span>{globalCases.cases}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Today's Cases</span> <span>{globalCases.todayCases}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Deaths</span> <span>{globalCases.deaths}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Today's Deaths</span> <span>{globalCases.todayDeaths}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Recovered Cases</span> <span>{globalCases.recovered}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Active Cases</span> <span>{globalCases.active}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Critical Condition</span> <span>{globalCases.critical}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Cases / 1M</span>{\" \"}\n            <span>{globalCases.casesPerOneMillion}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span>Deaths / 1M</span>{\" \"}\n            <span> {globalCases.deathsPerOneMillion}</span>\n          </p>\n          <p className=\"global_numbers\">\n            <span> Affected Countries</span>{\" \"}\n            <span>{globalCases.affectedCountries}</span>\n          </p>\n          <p style={{ textAlign: \"center\", color: \"green\" }}>\n            Updated : {moment(globalCases.updated).fromNow()}\n          </p>\n        </Fragment>\n      ) : (\n        <Spinner />\n      )}\n    </div>\n  );\n};\n\nexport default GlobalStats;\n","import React from \"react\";\nimport TotalCases from \"./aside/TotalCases\";\nimport BasicStats from \"./aside/BasicStats\";\nimport StatsExplanation from \"./aside/StatsExplanation\";\nimport StarOnGithub from \"./aside/StarOnGithub\";\nimport EmergencyContacts from \"./aside/EmergencyContacts\";\nimport Headline from \"./Headline\";\nimport Tabs from \"./Tabs\";\nimport GlobalStats from \"./aside/GlobalStats\";\n\nconst ContentLayout = () => {\n  return (\n    <div className=\"content-layout\">\n      <Headline title=\"Coronavirus Resources and Updates from GHS\" />\n      <div className=\"row container\">\n        <div className=\"col s12 l8\">\n          <Tabs />\n        </div>\n        <div className=\"col s12 l4\">\n          <TotalCases />\n          <BasicStats />\n          <GlobalStats />\n          <StatsExplanation />\n          <EmergencyContacts />\n          <StarOnGithub />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentLayout;\n","import React, { Fragment } from \"react\";\nimport Snapshot from \"../components/Snapshot\";\nimport ContentLayout from \"../components/ContentLayout\";\n\nconst HomePage = () => {\n  return (\n    <Fragment>\n      <Snapshot />\n      <ContentLayout />\n    </Fragment>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport Tilt from \"react-tilt\";\nimport { Link } from \"react-router-dom\";\n\nconst Logo = () => {\n  return (\n    <div className=\"logo\">\n      <Tilt className=\"Tilt\" options={{ max: 10 }}>\n        <div className=\"Tilt-inner\">\n          <Link to=\"/covid19\" className=\"brand-logo\">\n            COVITRACK\n          </Link>\n        </div>\n      </Tilt>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport M from \"materialize-css\";\n\nimport Logo from \"./Logo\";\n\nconst NavigationMenu = () => {\n  const [navLinks, setMenuStates] = useState([\n    { text: \"Statistics\", path: \"/covid19/statistics\" },\n    { text: \"Global News\", path: \"/covid19/global-news\" },\n  ]);\n\n  useEffect(() => {\n    M.AutoInit();\n  }, []);\n\n  const menuLinks = navLinks.map((item, index) => {\n    return (\n      <li key={index}>\n        <NavLink to={item.path}>{item.text}</NavLink>\n        <div className=\"divider hide-on-large-only\"></div>\n      </li>\n    );\n  });\n\n  return (\n    <Fragment>\n      <nav className=\"navigation\">\n        <div className=\"nav-wrapper container\">\n          <Logo />\n          <a\n            href=\"#\"\n            data-target=\"mobile-demo\"\n            className=\"sidenav-trigger\"\n            rel=\"noopener noreferrer\"\n          >\n            <i className=\"material-icons\">menu</i>\n          </a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            {menuLinks}\n          </ul>\n        </div>\n      </nav>\n      <ul className=\"sidenav\" id=\"mobile-demo\">\n        {menuLinks}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default NavigationMenu;\n","import React from \"react\";\n\nconst SearchBox = (props) => {\n  const { countries, onFilter } = props;\n  return (\n    <div className=\"searchbox z-depth-3\">\n      <div className=\"input-field\">\n        <input\n          type=\"text\"\n          placeholder=\"Start typing a country...\"\n          className=\"white-text search\"\n          onChange={onFilter}\n        />\n      </div>\n      <p>\n        Currently displaying data for {countries.length} affected{\" \"}\n        {countries.length > 1 ? \"countries\" : \"country\"}\n      </p>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport moment from \"moment\";\n\nconst TableRow = (props) => {\n  const { countries } = props;\n  return (\n    <tr>\n      <td>\n        <img\n          src={countries.countryInfo.flag}\n          alt={countries.country}\n          className=\"responsive-img avatar\"\n        />\n      </td>\n      <td>{countries.country}</td>\n      <td>{countries.cases}</td>\n      <td>{countries.todayCases}</td>\n      <td>{countries.deaths}</td>\n      <td>{countries.todayDeaths}</td>\n      <td>{countries.recovered}</td>\n      <td>{countries.active}</td>\n      <td>{countries.critical}</td>\n      <td>{countries.casesPerOneMillion}</td>\n      <td>{countries.deathsPerOneMillion}</td>\n    </tr>\n  );\n};\n\nexport default TableRow;\n","import React, { Fragment } from \"react\";\nimport Spinner from \"../Spinner\";\nimport TableRow from \"./TableRow\";\nimport moment from \"moment\";\n\nconst TabularData = (props) => {\n  const { countries, loading, latestUpdate } = props;\n  let time = moment(latestUpdate).format(\"dddd, MMMM Do, YYYY / hh:mm:ss A\");\n  return (\n    <div className=\"tabular-data container \">\n      <p style={{ textAlign: \"center\", color: \"#E8ED41\", opacity: \"0.8\" }}>\n        {loading\n          ? countries.length !== 0\n            ? `Last updated: ${time}`\n            : null\n          : null}\n      </p>\n      {loading ? (\n        countries.length !== 0 ? (\n          <table className=\"responsive-table centered highlight ui raised tall stacked segment\">\n            <thead>\n              <tr>\n                <th>Flag</th>\n                <th>Country</th>\n                <th>Cases</th>\n                <th>Today's Cases</th>\n                <th>Deaths</th>\n                <th>Today's Death</th>\n                <th>Recovered</th>\n                <th>Active Cases</th>\n                <th>Critical Condition</th>\n                <th>Cases / 1M</th>\n                <th>Deaths / 1M</th>\n              </tr>\n            </thead>\n            <tbody>\n              {countries.map((country, index) => (\n                <TableRow key={index} countries={country} />\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <h3\n            style={{ textAlign: \"center\", color: \"#fff\", fontSize: \"1.5rem\" }}\n          >\n            No Countries found, try again...\n          </h3>\n        )\n      ) : (\n        <Fragment>\n          <Spinner />\n          <p style={{ color: \"#fff\", textAlign: \"center\" }}>\n            Fetching Countries data...\n          </p>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default TabularData;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport SearchBox from \"./SearchBox\";\nimport TabularData from \"./TabularData\";\n\nconst CountryStats = () => {\n  const [countries, setCountries] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [latestUpdate, setRecentUpdate] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(\"https://corona.lmao.ninja/all\")\n      .then((response) => {\n        setRecentUpdate(response.data.updated);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  useEffect(() => {\n    setLoading(false);\n    axios\n      .get(\"https://corona.lmao.ninja/countries\")\n      .then((response) => {\n        setCountries(response.data);\n        setLoading(true);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  const handleCountryFilter = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const filteredCountries = countries.filter((c) => {\n    return c.country.toLowerCase().includes(search.toLowerCase());\n  });\n\n  return (\n    <div className=\"country-stats\">\n      <div className=\"row\">\n        <div className=\"col s12 m6 offset-m3 l6 offset-l3\">\n          <SearchBox\n            onFilter={handleCountryFilter}\n            countries={filteredCountries}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col s12\">\n          <TabularData\n            countries={filteredCountries}\n            loading={isLoading}\n            latestUpdate={latestUpdate}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryStats;\n","import React from \"react\";\nimport CountryStats from \"../components/countries/CountryStats\";\n\nconst Statistics = () => {\n  return (\n    <div className=\"stattistics\">\n      <CountryStats />\n    </div>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst GlobalNews = () => {\n  return (\n    <div className=\"global-news\">\n      <h3\n        style={{\n          marginTop: \"50px\",\n          textAlign: \"center\",\n          opacity: \"0.8\",\n          color: \"#fff\",\n          fontSize: \"2rem\",\n        }}\n      >\n        This page is coming soon...\n      </h3>\n    </div>\n  );\n};\n\nexport default GlobalNews;\n","import React, { useEffect, useState } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Homepage from \"../pages/HomePage\";\nimport NavigationMenu from \"../components/navbar/Navigation\";\nimport GithubCorner from \"react-github-corner\";\nimport axios from \"axios\";\nimport cheerio from \"cheerio\";\nimport GHSContext from \"../context/GHScontext\";\nimport LocalNews from \"../components/local_news/LocalNews\";\nimport Statistics from \"../pages/Statistics\";\nimport GlobalNews from \"../pages/GlobalNews\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [video, setVideo] = useState({});\n  const [cases, setCases] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://cors-anywhere.herokuapp.com/https://ghanahealthservice.org/covid19/\"\n      )\n      .then((response) => {\n        const $ = cheerio.load(response.data);\n        const postData = [];\n        const latestVideo = {};\n        const confirmedCases = {};\n\n        $(\".widget-box-status-content\").each((i, el) => {\n          const title = $(el).find(\"p strong\").text();\n\n          const content = $(el).find(\".widget-box-status-text\").text();\n          const posts = { title: title, content: content };\n          postData.push(posts);\n        });\n\n        const casesCount = $(\n          \".grid-column div:nth-child(5) .widget-box-content span\"\n        ).text();\n\n        const recoveries = $(\n          \".grid-column div:nth-child(2) .widget-box-content .information-line-list div:nth-child(2) .information-line-text\"\n        ).text();\n\n        const deaths = $(\n          \".grid-column div:nth-child(2) .widget-box-content .information-line-list div:nth-child(6) .information-line-text\"\n        ).text();\n\n        confirmedCases.count = casesCount;\n        let today = new Date();\n        let date =\n          today.getFullYear() +\n          \"-\" +\n          (today.getMonth() + 1) +\n          \"-\" +\n          today.getDate();\n        let time =\n          today.getHours() +\n          \":\" +\n          today.getMinutes() +\n          \":\" +\n          today.getSeconds();\n        let dateTime = date + \" \" + time;\n        confirmedCases.date = dateTime;\n        confirmedCases.recoveries = recoveries;\n        confirmedCases.deaths = deaths;\n\n        const CFR = deaths / casesCount;\n        confirmedCases.CFR = CFR.toFixed(2);\n        const recoveryRate = recoveries / casesCount;\n        confirmedCases.recoveryRate = recoveryRate.toFixed(2);\n\n        const videoTitle = $(\".stream-box-title\").text();\n        latestVideo.videoHeading = videoTitle;\n        const videoUrl = $(\".stream-box-title a\").attr(\"href\");\n        latestVideo.videoLink = videoUrl;\n\n        setLoading(true);\n        setPosts(postData);\n        setVideo(latestVideo);\n        setCases(confirmedCases);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n  return (\n    <main>\n      <NavigationMenu />\n      <GHSContext.Provider value={{ posts, video, cases, loading }}>\n        <Route exact path=\"/covid19\" render={() => <Homepage />} />\n        <GithubCorner\n          href=\"https://github.com/danielkpodo/covid19/tree/master\"\n          size=\"55\"\n          bannerColor=\"#8a0303\"\n          className=\"github\"\n          target=\"_blank\"\n        />\n        <Route exact path=\"/covid19/statistics\" component={Statistics} />\n        <Route exact path=\"/covid19/global-news\" component={GlobalNews} />\n      </GHSContext.Provider>\n    </main>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}